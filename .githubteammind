# IRU TOMO プロジェクト GitHub チームルール

## 基本ルール

### ブランチ戦略
- **メインブランチ**: `main` - 常に本番環境にデプロイ可能な状態を維持
- **開発ブランチ**: `develop` - 次回リリース用の開発ブランチ
- **機能ブランチ**: `feature/機能名` - 新機能開発用
- **修正ブランチ**: `fix/問題名` - バグ修正用
- **リリースブランチ**: `release/バージョン` - リリース準備用

### コミットメッセージ規約
- 日本語または英語で統一（プロジェクト内で一貫性を保つ）
- プレフィックスを使用して内容を明確に:
  - `feat:` - 新機能
  - `fix:` - バグ修正
  - `docs:` - ドキュメント更新
  - `style:` - コードスタイル変更（機能に影響なし）
  - `refactor:` - リファクタリング
  - `perf:` - パフォーマンス改善
  - `test:` - テスト追加・修正
  - `chore:` - ビルドプロセスやツール変更

例: `fix: スクロール時のヘッダー固定問題を修正`

### プルリクエスト
- タイトルは明確に、内容を端的に表現
- 説明には以下を含める:
  - 変更内容の概要
  - 関連するIssue番号
  - テスト方法
  - スクリーンショット（UI変更がある場合）
- 最低1人のレビュアーの承認が必要
- CIテストがパスしていること

## コード品質ルール

### 一般的なコーディング規約
- インデントはスペース2つで統一
- セミコロンは必ず使用
- 変数・関数名はキャメルケース（`camelCase`）
- コンポーネント名はパスカルケース（`PascalCase`）
- ファイル名はコンポーネント名と一致させる

### TypeScript規約
- 型定義は明示的に行う
- `any`型の使用は最小限に抑える
- インターフェースを積極的に活用（例: `NavItem`インターフェース）
- 関数の戻り値型を明示する（例: `NavItem[]`）

### React/コンポーネント規約
- 関数コンポーネントとHooksを使用
- 大きなコンポーネントは小さな責任を持つコンポーネントに分割
- コンポーネントのpropsにはインターフェースを定義
- 副作用は`useEffect`内に限定
- メモ化（`useMemo`, `useCallback`）を適切に使用

## UI実装ルール

### ナビゲーション実装
- ナビゲーション項目は`lib/navigation.ts`で一元管理
- デスクトップとモバイルで表示項目を分離（`getHeaderNavItems`と`getMobileNavItems`）
- ナビゲーション関数は各ラッパーコンポーネント内で定義し、子コンポーネントに渡す

### ヘッダー実装
- ヘッダーは常に`position: fixed`で固定表示
- z-indexは9980以上を使用（モーダルやオーバーレイとの関係を考慮）
- スクロール検知を使用してシャドウ効果を動的に変更可能
- スクロール時にヘッダーを非表示にする実装は避ける（ユーザビリティ低下）

### スクロール対応
- ヘッダー下にはスペーサー要素を配置（`<div className="h-16 md:h-16 mt-2"></div>`）
- スクロールイベントリスナーは最適化（throttlingなど）
- スクロール位置の保存には`useRef`を使用

### レスポンシブデザイン
- モバイルファーストアプローチを採用
- メディアクエリは一貫して使用（例: `@media (min-width: 768px)`）
- 画面サイズに応じた適切なUIコンポーネントの表示/非表示

## レビュープロセス

### コードレビュー基準
- 機能要件を満たしているか
- コーディング規約に準拠しているか
- パフォーマンスへの影響はないか
- セキュリティ上の問題はないか
- テストは十分か
- ドキュメントは更新されているか

### UI/UXレビュー基準
- デザインガイドラインに準拠しているか
- レスポンシブデザインは適切か
- アクセシビリティに配慮されているか
- ユーザビリティは確保されているか
- 多言語対応は適切か

## 学習と改善

### 知見の共有
- 実装で得られた知見は`.learned.md`に記録
- 複雑な実装パターンはコメントで説明
- チーム内で定期的に知見共有セッションを実施

### 継続的改善
- スプリントレトロスペクティブでプロセス改善を議論
- 技術負債は計画的に返済
- 新しい技術やパターンの導入は慎重に検討

## 特定の実装パターン

### 固定ヘッダーの実装
```css
.header {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 60px;
  background-color: var(--background-color, #ffffff);
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  z-index: 9980;
  transition: all 0.3s ease;
}

.scrolled {
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
}
```

### スクロール検知の実装
```javascript
useEffect(() => {
  const handleScroll = () => {
    if (window.scrollY > 20) {
      setIsScrolled(true);
    } else {
      setIsScrolled(false);
    }
  };
  
  window.addEventListener('scroll', handleScroll);
  
  return () => {
    window.removeEventListener('scroll', handleScroll);
  };
}, []);
```

### コンテンツオーバーラップ防止
```jsx
<>
  <Header />
  <div className="h-16 md:h-16 mt-2"></div>
  <main>{children}</main>
</>
```

### ナビゲーション項目の分離
```typescript
// ヘッダー用のナビゲーションアイテム（限定バージョン）
const HEADER_NAV_ITEMS = getHeaderNavItems(language, {
  goToHome,
  goToServiceIntroduction,
  goToStoreInfo,
  goToReviews
});

// ハンバーガーメニュー用のナビゲーションアイテム（全アイテム）
const MOBILE_NAV_ITEMS = getMobileNavItems(language, {
  goToHome,
  goToServiceIntroduction,
  goToOptions,
  goToCautions,
  goToStoreInfo,
  goToReviews,
  goToReservation,
  goToLogin,
  goToAdmin
});
```

これらのルールは、プロジェクトの進行に合わせて定期的に見直し、必要に応じて更新してください。 